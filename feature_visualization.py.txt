import streamlit as st
import torch
import torchvision.transforms.functional as TF
from PIL import Image
import numpy as np

def get_feature_maps(model, model_type, image_tensor):
    feature_maps = {}

    def hook_fn(name):
        def hook(module, input, output):
            feature_maps[name] = output.detach()
        return hook

    # Register hooks for some early layers
    if model_type.lower() == "efficientnet":
        for name, module in model.model.blocks.named_children():
            module.register_forward_hook(hook_fn(f"stage_{name}"))

    model(image_tensor)
    return feature_maps

def display_feature_maps(input_image, feature_maps):
    st.subheader("Feature Maps")
    for layer, fmap in feature_maps.items():
        fmap = fmap.squeeze(0)  # remove batch dim
        num_channels = min(fmap.shape[0], 6)  # show up to 6 channels
        st.markdown(f"*Layer: {layer}*")
        cols = st.columns(num_channels)
        for i in range(num_channels):
            fmap_img = fmap[i].cpu().numpy()
            fmap_img = (fmap_img - fmap_img.min()) / (fmap_img.max() - fmap_img.min() + 1e-5)
            fmap_img = Image.fromarray(np.uint8(fmap_img * 255)).resize((100, 100))
            cols[i].image(fmap_img, use_column_width=True)